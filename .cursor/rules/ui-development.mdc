---
description: 
globs: 
alwaysApply: false
---
# 图像缺陷检测系统UI开发规范

## UI架构
1. 基于PyQt5框架开发
2. 采用MVC模式进行设计：
   - Model: 数据处理和业务逻辑
   - View: UI界面定义
   - Controller: 连接Model和View的信号处理
3. UI组件应存放在[src/ui/](mdc:src/ui)目录下
4. 主窗口和功能模块UI应分离

## UI设计原则
1. 用户界面应简洁清晰
2. 使用统一的样式和布局
3. 提供足够的操作反馈和进度信息
4. 错误提示应友好且包含解决方案
5. 支持关键操作的快捷键
6. 保持一致的操作流程
7. 对耗时操作提供取消选项

## 代码组织
1. 每个主要UI组件应单独存放在一个文件中
2. UI定义与业务逻辑分离
3. 使用QSS样式表统一管理样式
4. 使用资源文件管理图标等资源

## 多线程处理
1. 所有耗时操作必须在独立线程中执行
2. 使用PyQt的信号和槽机制进行线程间通信
3. 主线程专注于UI处理，不执行耗时计算
4. 线程操作应提供进度更新和取消机制

## 事件处理
1. 使用信号和槽连接UI事件与处理函数
2. 避免在事件处理器中直接执行耗时操作
3. 复杂事件流程应分解为多个步骤
4. 事件处理函数命名应反映其功能

## 布局管理
1. 使用布局管理器（QVBoxLayout, QHBoxLayout, QGridLayout）而非绝对定位
2. 设计响应式布局，适应不同屏幕尺寸
3. 为复杂界面组件使用嵌套布局
4. 使用QSplitter允许用户调整面板大小

## 表单验证
1. 所有用户输入应进行验证
2. 提供实时反馈指出无效输入
3. 在提交前进行完整性检查
4. 错误信息应明确指出问题和解决方法

## 数据显示
1. 使用适当的控件显示不同类型的数据：
   - 图表：使用matplotlib或PyQtGraph
   - 列表数据：QTableView/QTableWidget
   - 树形结构：QTreeView/QTreeWidget
   - 图像：QLabel或自定义控件
2. 大数据集应使用分页或虚拟滚动
3. 提供数据排序和过滤功能
4. 支持数据导出到常见格式

## 对话框使用
1. 使用模态对话框阻止不安全的并行操作
2. 非模态对话框用于辅助信息显示
3. 确认对话框应明确操作后果
4. 支持任务进度对话框取消操作

## 资源管理
1. 图标和图像资源使用资源文件管理
2. 国际化字符串使用翻译文件
3. 样式应集中在QSS文件中
4. 大型资源应延迟加载

